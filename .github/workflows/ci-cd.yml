name: Forest Cover Prediction CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint
      
      - name: Run Black
        run: black --check --diff .
        continue-on-error: true
      
      - name: Run isort
        run: isort --check-only --diff .
        continue-on-error: true
      
      - name: Run Flake8
        run: flake8 . --count --max-line-length=120 --exclude=venv,__pycache__,.git --statistics
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
      
      - name: Run Bandit
        run: bandit -r . -ll -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30
        if: always()

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run pytest
        run: pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30
        if: always()

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Start server
        run: |
          nohup python fastapi_main.py > server.log 2>&1 &
          sleep 15
      
      - name: Run API tests
        run: pytest tests/test_api.py -v
      
      - name: Stop server
        if: always()
        run: pkill -f fastapi_main.py || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, api-tests]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  report:
    name: Build Report
    runs-on: ubuntu-latest
    needs: [test, security, api-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate report
        run: |
          echo "# Build Report" > report.md
          echo "Branch: ${{ github.ref_name }}" >> report.md
          echo "Commit: ${{ github.sha }}" >> report.md
      
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: report.md
          retention-days: 90
